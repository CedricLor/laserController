LASER CONTROLLER

DONE:
v.3.0.0
HIGH: Combine logic of directPinsSwitch() and LaserSafetyLoop()
      Rewrite all the things type thisPin % 2 == 0 with the logic of directPinsSwitch()
      The combination of the logic of the directPinsSwitch has been done by:
1. adding three functions to switch the pairing:
void pairAllPins(const bool targetPairingState): loops over each of the pins to pair or unpair them in slave or master state
void pairPin(const short thisPin, const bool targetPairingState): called from within the loop in pairAllPins(). Pairs or unpairs individual pins.
void rePairPin(const short thisPin): sub called from pairPin in case the instruction is to pair the pins together. Checks whether the current pin is an odd or an even.
2. making two calls to pairAllPins from:
- onEnablePirStartUpDelayBlinkLaser() on first iteration: pairAllPins(false);
- onDisablePirStartUpDelayBlinkLaser() on last iteration: pairAllPins(true);
Detail: added an additional iteration to SI_PIR_START_UP_DELAY_ITERATIONS (set at 7 now) because when task tPirStartUpDelayBlinkLaser gets disabled, it immediately kills any actions related to itself (including the subtasks tLaserOff and tLaserOff which produce this little blinking at the beginning of the pir startup cycle).
Note: in tPirStartUpDelayBlinkLaser(), the if (!(tPirStartUpDelayBlinkLaser.isLastIteration())) condition for the sub tasks was kept.

 *  TO DO:
 *  HIGH: Line 418: do a few prints to understand if setIterations resets the iteration counter.
 *  HIGH: Rename directPinsSwitch() to give it a more explicit name
 *  HIGH: Add a true laserSafetyLoop that turns lasers off in whichever situations if they have been on for more than 30 seconds
          and prevents them from being turned back on by any process for a corresponding cooling off time
 *  MIDDLE: blinking delay: paired feature --> maybe already done / Check it
 *  MIDDLE: pair - unpair proc: pass the unpairing to the slave or this is going to produce unexpected results
 *  LOW: refactor all part where String is still used to replace them with arrays of char*
 *  LOW: refactoring: get rid of repetitive code where generating html tags
 *  LOW: refactor: use TEMPLATE markers in html code
 *  LOW: refactor: store html code in PROGMEM
 *  LOW: refactor: response to response-> as shown in the ESPAsyncWebServer github page
 *  LOW: in the web controller, add reading the pairing / unpairing control and connect to pairPin
*/

Link to the libraries: .platformio/lib

Includes ver. 3.0.2 of TaskScheduler and ver. 1.2.8 of painlessMesh (v. 1.3.0 crashes on use of ArduinoJson 6)

TO DO:
- add a field for index number in LaserPin class
- refactor updatePairedSlave() member function of LaserPin class accordingly
- refactor LaserPin class so that member functions become non-static member functions of LaserPin
- add a field for index number in ControlerBox class
- rename all the controlerBox refs to ControllerBox
- add a function so that the paired lasers be on together (synchronously)
- review all the current module to "privatize" as many member functions as possible
- refactor the various arrays containing the controllerBoxes mode into a single class
