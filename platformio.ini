; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino
build_flags = -std=c++14
build_flags = -std=gnu++14
build_unflags = -std=c++11
build_unflags = -std=gnu++98
build_unflags = -std=gnu++11

; Custom Serial Monitor speed (baud rate)
monitor_speed = 115200

; To upload spiffs on VS Code, enter the following line in a terminal:
; platformio run --target uploadfs

; OTA: comment the following line when using OTA
upload_port = /dev/cu.SLAB_USBtoUART

; OTA: uncomment the following block (except, maybe, --spiffs),
; when using OTA
; upload_protocol = espota
; upload_port = 192.168.43.200 ; (ou 201 ou 202 ou etc.)
; upload_flags =
;     --port=3232 ; ESP32 OTA Port. Default 8266 in PlatformIO and 3232 on ESP32
;     --spiffs ; Use this option to transmit a SPIFFS image and do not flash the module


; libdeps = ArduinoOTA@1.0, ESP Async WebServer@1.2.0, ArduinoJson@5.13.4, TaskScheduler@3.0.2, painlessMesh@1.2.8

; To launch a local web server on this machine and debug the JS:
;    $ node data/node.js
; It will launch an express web server serving the file in the data dir.
; The webserver may need to be reconfigured in data/node.js to fit your needs.

; Note that the javascript script is looking for the WebSocket server at the IP address
; which is mentionned in the URL of your browser. You might also want to reconfigure this.


; *** Debugging JS/HTML/CSS in Chrome with VS Code
; 1. start the local web node webserver: in the project folder
;    $ node data/node.js

; 2. in the explorer panel, position yourself at the root of the project

; -> launch mode
; 3. in the debug panel, select the "Chrome launch" configuration

; 4. press F5 or the play button -> this should open a Chrome instance pointing to your app

; -> attach mode
; 3. on the command line:
;    $ /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --remote-debugging-port=8000

; 4. in the debug panel, select the "Chrome attach" configuration

; 5. press F5 or the play button

; 6. point Chrome to localhost:8000

; note on the attach mode:
; a. the port might also need to be set to 9222 in data/node/node.js or you 
;    need to set the port for the "Chrome attach" to 8000 in the debug 
;    configuration tool available in the debug panel of VS Code.
; b. you might also need to modify the "url" key in .vs/launch.json (via the debug 
;    configuration tool available in the debug panel of VS Code).
